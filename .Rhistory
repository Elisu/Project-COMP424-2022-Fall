model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
W
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
W
Ws <- data.frame()
#Y <- arima.sim(list(order = c(2,4,0),ar=theta,ma=phi),n)
nsim <- 1000
Ws <- data.frame()
for(i in 1:nsim){
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbind(Ws, data.frame(ind = i, W = W))
}
#Y <- arima.sim(list(order = c(2,4,0),ar=theta,ma=phi),n)
nsim <- 1000
Ws <- data.frame()
i <- 1
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
data.frame(ind = i, W = W)
Ws <- rbind(Ws, data.frame(ind = i, W = W))
i <- 2
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbind(Ws, data.frame(ind = i, W = W))
data.frame(ind = i, W = W)
Ws <- rbindlist(list(Ws, data.frame(ind = i, W = W)), use.names = T)
Ws <- rbind(list(Ws, data.frame(ind = i, W = W)), use.names = T)
Ws
Ws <- rbind(Ws, data.frame(ind = i, W = W))
Ws
#Y <- arima.sim(list(order = c(2,4,0),ar=theta,ma=phi),n)
nsim <- 1000
Ws <- data.frame()
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbind(Ws, data.frame(ind = i, W = W))
i <- 3
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
data.frame(ind = i, W = W)
Ws
rbind(Ws, data.frame(ind = i, W = W))
data.frame(ind = i, W = W)
library(dattable)
library(datatable)
library(data.table)
Ws <- data.table()
data.table(ind = i, W = W)
#Y <- arima.sim(list(order = c(2,4,0),ar=theta,ma=phi),n)
nsim <- 1000
Ws <- data.table()
for(i in 1:nsim){
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbindlist(list(Ws, data.table(ind = i, W = W)),use.names = TRUE)
}
Ws
plotW
mu <- 5.5
time <- 1:8
Yt_Data <- c(237.9, 236.5, 238.1, 241, 241.4, 241.4, 243.8,245.0)
Wt_Data <- log(Yt_Data)-mu
Wt_Data
plotY <- data.frame(time = time, Y = Yt_Data)
plotW <- data.frame(time = time, Y = Wt_Data)
plotW
rm(list=ls())
library("ggplot2")
library(forecast)
library(data.table)
p = 2 # AR order
q <- 0 # MA order
d <- 0 # differencing order
P <- 1 # AR order (seasonal)
Q <- 0 # MA order (seasonal)
D <- 0 # differencing order (seasonal)
Period <- 4 # Season 4 (quarters)
phi = -1*c(-0.9,0.3) # Coefficients of AR part
Phi = -1*c(-0.6) # Coefficients of AR seasonal part
theta <- runif(Q)
Theta <- runif(Q)
n <- 8
#Y <- arima.sim(list(order = c(2,4,0),ar=theta,ma=phi),n)
nsim <- 1000
Ws <- data.table()
for(i in 1:nsim){
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbindlist(list(Ws, data.table(ind = i, W = W, time = 1:8)),use.names = TRUE)
}
plotdata <- rbindlist(list(as.data.table(plotw), Ws))
plotdata <- rbindlist(list(as.data.table(plotW), Ws))
mu <- 5.5
time <- 1:8
Yt_Data <- c(237.9, 236.5, 238.1, 241, 241.4, 241.4, 243.8,245.0)
Wt_Data <- log(Yt_Data)-mu
plotY <- data.frame(time = time, Y = Yt_Data)
plotW <- data.frame(time = time, Y = Wt_Data)
plotW
Ws
plotdata <- rbindlist(list(as.data.table(plotW), Ws[,.(Y=W,time)]), use.names=T)
plotW
time
str(plotW)
str(Ws)
plotdata <- rbindlist(list(as.data.table(plotW), Ws[,.(Y=as.numeric(W),time)]), use.names=T)
plotdata
plotdata <- rbindlist(list(as.data.table(plotW[,.(Y,time,data=data)]), Ws[,.(Y=as.numeric(W),time, data=model)]), use.names=T)
plotdata <- rbindlist(list(as.data.table(plotW[,.(Y,time,data="data")]), Ws[,.(Y=as.numeric(W),time, data="model")]), use.names=T)
Ws[,.(Y=as.numeric(W),time, data="model")]
plotdata <- rbindlist(list(as.data.table(plotW)[,.(Y,time,data="data")], Ws[,.(Y=as.numeric(W),time, data="model")]), use.names=T)
ggplot(data = plotdata, aes(x = time, y = Y), group = data) + geom_point()
ggplot(data = plotdata, aes(x = time, y = Y), group = data) + geom_line()
ggplot(data = plotdata, aes(x = time, y = Y), group = data) + geom_line(group = data)
plotdata <- rbindlist(list(as.data.table(plotW)[,.(Y,time,data="data")], Ws[,.(Y=as.numeric(W),time, data=paste0("model",ind))]), use.names=T)
ggplot(data = plotdata, aes(x = time, y = Y), group = data) + geom_line(aes(group = data))
ggplot(data = plotdata, aes(x = time, y = Y),group = data, color = data) + geom_line(aes(group = data))
ggplot(data = plotdata, aes(x = time, y = Y),group = data, color = data) + geom_line(aes(group = data,color=data))
nsim <- 100
Ws <- data.table()
for(i in 1:nsim){
model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbindlist(list(Ws, data.table(ind = i, W = W, time = 1:8)),use.names = TRUE)
}
# model <- Arima(ts(rnorm(n),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
#                fixed=c(phi=phi, theta=theta,
#                        Phi=Phi, Theta=Theta),
#                include.mean = FALSE)
# W <- simulate(model, nsim=n)
# W
par(mfrow=c(1,2))
acf(Y,main="ACF")
pacf(Y,main="PACF")
cat("AR parameters:",round(theta,3))
cat("MA parameters:",round(phi,3))
mu <- 5.5
time <- 1:8
Yt_Data <- c(237.9, 236.5, 238.1, 241, 241.4, 241.4, 243.8,245.0)
Wt_Data <- log(Yt_Data)-mu
plotY <- data.frame(time = time, Y = Yt_Data)
plotW <- data.frame(time = time, Y = Wt_Data)
plotdata <- rbindlist(list(as.data.table(plotW)[,.(Y,time,data="data")], Ws[,.(Y=as.numeric(W),time, data=paste0("model",ind))]), use.names=T)
ggplot(data = plotY, aes(x = time, y = Y)) + geom_point()
ggplot(data = plotW, aes(x = time, y = Y)) + geom_point()
ggplot(data = plotdata, aes(x = time, y = Y),group = data, color = data) + geom_line(aes(group = data,color=data))
plotdata <- rbindlist(list(as.data.table(plotW)[,.(Y,time,data="data",col="data")],
Ws[,.(Y=as.numeric(W),time, data=paste0("model",ind), col = "model")]), use.names=T)
ggplot(data = plotdata, aes(x = time, y = Y),group = data, color = col) +
geom_line(aes(group = data,color=col))
plotdata
str(plotdata)
plotdata <- rbindlist(list(as.data.table(plotW)[,.(Y,time,data="zdata",col="data")],
Ws[,.(Y=as.numeric(W),time, data=paste0("model",ind), col = "model")]), use.names=T)
setkey(plotdata,data)
ggplot(data = plotdata, aes(x = time, y = Y),group = data, color = col) +
geom_line(aes(group = data,color=col))
ggplot(data = plotW, aes(x = time, y = Y)) + geom_point()
rm(list=ls())
library("ggplot2")
library(forecast)
library(data.table)
p = 2 # AR order
q <- 0 # MA order
d <- 0 # differencing order
P <- 1 # AR order (seasonal)
Q <- 0 # MA order (seasonal)
D <- 0 # differencing order (seasonal)
Period <- 4 # Season 4 (quarters)
phi = -1*c(-0.9,0.3) # Coefficients of AR part
Phi = -1*c(-0.6) # Coefficients of AR seasonal part
theta <- runif(Q)
Theta <- runif(Q)
n <- 8
#Y <- arima.sim(list(order = c(2,4,0),ar=theta,ma=phi),n)
nsim <- 100
Ws <- data.table()
for(i in 1:nsim){
model <- Arima(ts(rnorm(n,sd = 0.01),freq=Period), order=c(p,d,q), seasonal=c(P,D,Q),
fixed=c(phi=phi, theta=theta,
Phi=Phi, Theta=Theta),
include.mean = FALSE)
W <- simulate(model, nsim=n)
Ws <- rbindlist(list(Ws, data.table(ind = i, W = W, time = 1:8)),use.names = TRUE)
}
par(mfrow=c(1,2))
acf(Y,main="ACF")
pacf(Y,main="PACF")
cat("AR parameters:",round(theta,3))
cat("MA parameters:",round(phi,3))
mu <- 5.5
time <- 1:8
Yt_Data <- c(237.9, 236.5, 238.1, 241, 241.4, 241.4, 243.8,245.0)
Wt_Data <- log(Yt_Data)-mu
mu <- 5.5
time <- 1:8
Yt_Data <- c(237.9, 236.5, 238.1, 241, 241.4, 241.4, 243.8,245.0)
Wt_Data <- log(Yt_Data)-mu
plotY <- data.frame(time = time, Y = Yt_Data)
plotW <- data.frame(time = time, Y = Wt_Data)
plotdata <- rbindlist(list(as.data.table(plotW)[,.(Y,time,data="zdata",col="data")],
Ws[,.(Y=as.numeric(W),time, data=paste0("model",ind), col = "model")]), use.names=T)
ggplot(data = plotY, aes(x = time, y = Y)) + geom_point()
ggplot(data = plotW, aes(x = time, y = Y)) + geom_point()
setkey(plotdata,data)
ggplot(data = plotdata, aes(x = time, y = Y),group = data, color = col) +
geom_line(aes(group = data,color=col))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
a = [1, 2 ,3 ,3,NA,NA,NA]
getmode(a)
a = [1, 2 ,3 ,3,NA,NA,NA]
getmode(a)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
a = [1, 2 ,3 ,3,NA,NA,NA]
a = c(1, 2 ,3 ,3,NA,NA,NA)
getmode(a)
getmode(a[!is.na(a)])
rm(list = ls())
library(ggplot2)
library(data.table)
setwd("~/Documents/Uni/Study abroad/NiendeSemester/COMP 424/Project/Project-COMP424-2022-Fall")
time_b6 <- as.array(read.delim("data/times_player1_boardsize_6.txt")[,1])
time_b7 <- as.array(read.delim("data/times_player1_boardsize_7.txt")[,1])
time_b8 <- as.array(read.delim("data/times_player1_boardsize_8.txt")[,1])
time_b9 <- as.array(read.delim("data/times_player1_boardsize_9.txt")[,1])
time_b10 <- as.array(read.delim("data/times_player1_boardsize_10.txt")[,1])
time_b11 <- as.array(read.delim("data/times_player1_boardsize_11.txt")[,1])
time_b12 <- as.array(read.delim("data/times_player1_boardsize_12.txt")[,1])
thread_b6 <- as.array(read.delim("data/times_player1_boardsize_6.txt")[,1])
thread_b7 <- as.array(read.delim("data/threads_player1_boardsize_7.txt")[,1])
thread_b8 <- as.array(read.delim("data/threads_player1_boardsize_8.txt")[,1])
thread_b9 <- as.array(read.delim("data/threads_player1_boardsize_9.txt")[,1])
thread_b10 <- as.array(read.delim("data/threads_player1_boardsize_10.txt")[,1])
thread_b11 <- as.array(read.delim("data/threads_player1_boardsize_11.txt")[,1])
thread_b12 <- as.array(read.delim("data/threads_player1_boardsize_12.txt")[,1])
data <- data.table(time = c(time_b6,time_b7,time_b8,time_b9,time_b10,time_b11,time_b12),
board_size = c(rep(6,length(time_b6)),
rep(7,length(time_b7)),
rep(8,length(time_b8)),
rep(9,length(time_b9)),
rep(10,length(time_b10)),
rep(11,length(time_b11)),
rep(12,length(time_b12))),
round = c(seq(1,length(time_b6)),
seq(1,length(time_b7)),
seq(1,length(time_b8)),
seq(1,length(time_b9)),
seq(1,length(time_b10)),
seq(1,length(time_b11)),
seq(1,length(time_b12))))
data[,board_size := factor(as.character(board_size),as.character(seq(12,6)))]
data_threads <- data.table(time = c(thread_b6,thread_b7,thread_b8,thread_b9,thread_b10,thread_b11,thread_b12),
board_size = c(rep(6,length(thread_b6)),
rep(7,length(thread_b7)),
rep(8,length(thread_b8)),
rep(9,length(thread_b9)),
rep(10,length(thread_b10)),
rep(11,length(thread_b11)),
rep(12,length(thread_b12))),
round = c(seq(1,length(thread_b6)),
seq(1,length(thread_b7)),
seq(1,length(thread_b8)),
seq(1,length(thread_b9)),
seq(1,length(thread_b10)),
seq(1,length(thread_b11)),
seq(1,length(thread_b12))))
data_threads[,board_size := factor(as.character(board_size),as.character(seq(12,6)))]
ggplot(data, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 20)) +
ggtitle("Time spent on each move") +
xlab("Round") +
ylab("Time (s)") +
geom_hline(yintercept=2, linetype="dashed", color = "black") +
geom_hline(yintercept=30, linetype="dashed", color = "black") +
labs(color='Board size')
ggsave("times_autoplay2_tuned.eps", plot = last_plot(), width = 17, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 20)) +
ggtitle("Number of threads in search tree") +
xlab("Round") +
ylab("Number of threads") +
labs(color='Board size')
ggsave("threads_autoplay2_tuned.eps", plot = last_plot(), width = 17, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 20)) +
ggtitle("Number of simulation per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggplot(data, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Time spent on each move") +
xlab("Round") +
ylab("Time (s)") +
geom_hline(yintercept=2, linetype="dashed", color = "black") +
geom_hline(yintercept=30, linetype="dashed", color = "black") +
labs(color='Board size')
ggsave("times_autoplay2_tuned.eps", plot = last_plot(), width = 17, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Number of simulation per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggsave("threads_autoplay2_tuned.eps", plot = last_plot(), width = 17, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Number of simulations per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggsave("threads_autoplay2_tuned.eps", plot = last_plot(), width = 17, height = 12,units = "cm")
ggsave("times_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Number of simulations per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggplot(data, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Time spent on each move") +
xlab("Round") +
ylab("Time (s)") +
geom_hline(yintercept=2, linetype="dashed", color = "black") +
geom_hline(yintercept=30, linetype="dashed", color = "black") +
labs(color='Board size')
ggsave("times_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Number of simulations per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggsave("threads_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
rm(list = ls())
library(ggplot2)
library(data.table)
setwd("~/Documents/Uni/Study abroad/NiendeSemester/COMP 424/Project/Project-COMP424-2022-Fall")
time_b6 <- as.array(read.delim("data/times_player1_boardsize_6.txt")[,1])
time_b7 <- as.array(read.delim("data/times_player1_boardsize_7.txt")[,1])
time_b8 <- as.array(read.delim("data/times_player1_boardsize_8.txt")[,1])
time_b9 <- as.array(read.delim("data/times_player1_boardsize_9.txt")[,1])
time_b10 <- as.array(read.delim("data/times_player1_boardsize_10.txt")[,1])
time_b11 <- as.array(read.delim("data/times_player1_boardsize_11.txt")[,1])
time_b12 <- as.array(read.delim("data/times_player1_boardsize_12.txt")[,1])
thread_b6 <- as.array(read.delim("data/times_player1_boardsize_6.txt")[,1])
thread_b7 <- as.array(read.delim("data/threads_player1_boardsize_7.txt")[,1])
thread_b8 <- as.array(read.delim("data/threads_player1_boardsize_8.txt")[,1])
thread_b9 <- as.array(read.delim("data/threads_player1_boardsize_9.txt")[,1])
thread_b10 <- as.array(read.delim("data/threads_player1_boardsize_10.txt")[,1])
thread_b11 <- as.array(read.delim("data/threads_player1_boardsize_11.txt")[,1])
thread_b12 <- as.array(read.delim("data/threads_player1_boardsize_12.txt")[,1])
data <- data.table(time = c(time_b6,time_b7,time_b8,time_b9,time_b10,time_b11,time_b12),
board_size = c(rep(6,length(time_b6)),
rep(7,length(time_b7)),
rep(8,length(time_b8)),
rep(9,length(time_b9)),
rep(10,length(time_b10)),
rep(11,length(time_b11)),
rep(12,length(time_b12))),
round = c(seq(1,length(time_b6)),
seq(1,length(time_b7)),
seq(1,length(time_b8)),
seq(1,length(time_b9)),
seq(1,length(time_b10)),
seq(1,length(time_b11)),
seq(1,length(time_b12))))
data[,board_size := factor(as.character(board_size),as.character(seq(12,6)))]
data_threads <- data.table(time = c(thread_b6,thread_b7,thread_b8,thread_b9,thread_b10,thread_b11,thread_b12),
board_size = c(rep(6,length(thread_b6)),
rep(7,length(thread_b7)),
rep(8,length(thread_b8)),
rep(9,length(thread_b9)),
rep(10,length(thread_b10)),
rep(11,length(thread_b11)),
rep(12,length(thread_b12))),
round = c(seq(1,length(thread_b6)),
seq(1,length(thread_b7)),
seq(1,length(thread_b8)),
seq(1,length(thread_b9)),
seq(1,length(thread_b10)),
seq(1,length(thread_b11)),
seq(1,length(thread_b12))))
data_threads[,board_size := factor(as.character(board_size),as.character(seq(12,6)))]
ggplot(data, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Time spent on each move") +
xlab("Round") +
ylab("Time (s)") +
geom_hline(yintercept=2, linetype="dashed", color = "black") +
geom_hline(yintercept=30, linetype="dashed", color = "black") +
labs(color='Board size')
ggsave("times_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Number of simulations per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggsave("threads_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
data_threads
seq(12,6)
data_threads[board_size == "6"]
thread_b6
thread_b6 <- as.array(read.delim("data/threads_player1_boardsize_6.txt")[,1])
thread_b7 <- as.array(read.delim("data/threads_player1_boardsize_7.txt")[,1])
thread_b8 <- as.array(read.delim("data/threads_player1_boardsize_8.txt")[,1])
thread_b9 <- as.array(read.delim("data/threads_player1_boardsize_9.txt")[,1])
thread_b10 <- as.array(read.delim("data/threads_player1_boardsize_10.txt")[,1])
thread_b11 <- as.array(read.delim("data/threads_player1_boardsize_11.txt")[,1])
thread_b12 <- as.array(read.delim("data/threads_player1_boardsize_12.txt")[,1])
data <- data.table(time = c(time_b6,time_b7,time_b8,time_b9,time_b10,time_b11,time_b12),
board_size = c(rep(6,length(time_b6)),
rep(7,length(time_b7)),
rep(8,length(time_b8)),
rep(9,length(time_b9)),
rep(10,length(time_b10)),
rep(11,length(time_b11)),
rep(12,length(time_b12))),
round = c(seq(1,length(time_b6)),
seq(1,length(time_b7)),
seq(1,length(time_b8)),
seq(1,length(time_b9)),
seq(1,length(time_b10)),
seq(1,length(time_b11)),
seq(1,length(time_b12))))
data[,board_size := factor(as.character(board_size),as.character(seq(12,6)))]
data_threads <- data.table(time = c(thread_b6,thread_b7,thread_b8,thread_b9,thread_b10,thread_b11,thread_b12),
board_size = c(rep(6,length(thread_b6)),
rep(7,length(thread_b7)),
rep(8,length(thread_b8)),
rep(9,length(thread_b9)),
rep(10,length(thread_b10)),
rep(11,length(thread_b11)),
rep(12,length(thread_b12))),
round = c(seq(1,length(thread_b6)),
seq(1,length(thread_b7)),
seq(1,length(thread_b8)),
seq(1,length(thread_b9)),
seq(1,length(thread_b10)),
seq(1,length(thread_b11)),
seq(1,length(thread_b12))))
data_threads[,board_size := factor(as.character(board_size),as.character(seq(12,6)))]
ggplot(data, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Time spent on each move") +
xlab("Round") +
ylab("Time (s)") +
geom_hline(yintercept=2, linetype="dashed", color = "black") +
geom_hline(yintercept=30, linetype="dashed", color = "black") +
labs(color='Board size')
ggsave("times_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
ggplot(data_threads, aes(x=round, y=time, group = board_size, color = board_size)) +
geom_line()+
theme(text = element_text(size = 18)) +
ggtitle("Number of simulations per move") +
xlab("Round") +
ylab("Simulations (#)") +
labs(color='Board size')
ggsave("threads_autoplay2_tuned.eps", plot = last_plot(), width = 18, height = 12,units = "cm")
